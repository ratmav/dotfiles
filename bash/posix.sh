#!/usr/bin/env bash

posix_asdf() {
  if [ -f "$HOME/.asdf/asdf.sh" ]; then
    msg "${WARN}${FUNCNAME[0]}: asdf installed."
  else
    rm -rf $HOME/.asdf
    git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.15.0 > /dev/null 2>&1
    msg "${OK}${FUNCNAME[0]}: asdf installed."
    msg "${WARN}${FUNCNAME[0]}: sourcing ~/.bashrc may be required."
  fi
}

posix_configure_wez() {
  rm -f $HOME/.wezterm.lua
  cp ./wezterm.lua $HOME/.wezterm.lua
  msg "${OK}${FUNCNAME[0]}: configured wez."
}

posix_git() {
  git config --global core.excludesfile "$HOME/.gitignore_global"
  msg "${OK}${FUNCNAME[0]}: configured global gitignore."

  # TODO: maaaybe should be in a git config you can symlink to (also gpg config).
  git config --global core.editor "$(which nvim)"
  msg "${OK}${FUNCNAME[0]}: configured git editor."

  git config --global push.autoSetupRemote true
  msg "${OK}${FUNCNAME[0]}: configured git to automatically setup remote branches on push."
}

posix_nvim() {
  _posix_nvim_config "${FUNCNAME[0]}"
  _posix_nvim_plugins "${FUNCNAME[0]}"
}

posix_symlinks() {
  LINKS=(".bashrc" ".bash_profile" ".gitignore_global")
  for link in "${LINKS[@]}"; do
    rm -rf $HOME/$link
    ln -s $PWD/$link $HOME/$link
    msg "${OK}${FUNCNAME[0]}: symlinked $link"
  done
}

main_posix() {
  posix_symlinks
  posix_configure_wez
  posix_git
  posix_nvim
  posix_asdf
}

# Private functions

_posix_nvim_config() {
  local caller="$1"
  
  # Ensure nvim config directory exists
  rm -rf $HOME/.config/nvim
  mkdir -p $HOME/.config/nvim

  # Create a loader init.lua that points to the dotfiles repo
  cat > $HOME/.config/nvim/init.lua << EOF
-- This file is auto-generated by dotfiles setup
-- It loads the actual configuration from the dotfiles repository

-- Check if we're in installation mode or normal operation
if vim.env.NVIM_INSTALL_MODE == "1" then
  -- In installation mode, load the plugins registry directly to get the plugin definitions
  dofile("$PWD/neovim/plugins/init.lua")
  
  -- Then run the installation
  vim.cmd("autocmd User PaqDoneInstall quit")
  vim.cmd("PaqInstall")
else
  -- In normal operation, load the main neovim config
  dofile("$PWD/neovim.lua")
end
EOF

  msg "${OK}${caller}: created nvim config that loads from dotfiles repo."
}

_posix_nvim_plugins() {
  local caller="$1"
  
  # Clean up all plugins including paq
  NVIM_PLUGIN_PATH="$HOME/.local/share/nvim/site/pack"
  rm -rf "$NVIM_PLUGIN_PATH"
  mkdir -p "$NVIM_PLUGIN_PATH/paqs/start"
  msg "${OK}${caller}: cleaned up all nvim plugins."

  # Install paq-nvim
  PAQ_PATH="$HOME/.local/share/nvim/site/pack/paqs/start/paq-nvim"
  git clone --depth=1 https://github.com/savq/paq-nvim "$PAQ_PATH" > /dev/null 2>&1
  msg "${OK}${caller}: installed paq-nvim."

  # Launch Neovim to install plugins - redirect both stdout and stderr
  NVIM_INSTALL_MODE=1 nvim --headless -c 'autocmd User PaqDoneInstall quit' > /dev/null 2>&1
  msg "${OK}${caller}: installed neovim plugins."
}
